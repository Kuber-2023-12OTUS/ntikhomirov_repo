lua_package_path "/usr/local/openresty/nginx/lualib/lib/?.lua;;";
lua_shared_dict prometheus_metrics 10M;

init_worker_by_lua_block {
    prometheus = require("prometheus").init("prometheus_metrics")
    metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
    metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
    metric_connections = prometheus:gauge(
    "nginx_http_connections", "Number of HTTP connections", {"state"})
}
server {
    listen 8000 default_server;
    listen [::]:8000 default_server;

    root /homework;

    index index.html index.htm;

    location / {
        content_by_lua '
            ngx.header["Content-type"] = "text/html; charset=utf-8"

            index = "/homework/index.html"
            local status = io.open(index, "r")

            if status ~= nil then
                html = status:read("*all")
                ngx.say(html)
            else
                ngx.say("Возникла проблема с доступностью файла index.html. Вместо него произошла обработка с использованием языка программирования Lua.")
            end
            ngx.status = 200
            ngx.exit(200)
        ';
    }

    location /prometheus {
        #access_log off;

        content_by_lua '
            metric_connections:set(ngx.var.connections_reading, {"reading"})
            metric_connections:set(ngx.var.connections_waiting, {"waiting"})
            metric_connections:set(ngx.var.connections_writing, {"writing"})
            prometheus:collect()
        ';
    }

    location /metrics {
        stub_status on;
    }
}
