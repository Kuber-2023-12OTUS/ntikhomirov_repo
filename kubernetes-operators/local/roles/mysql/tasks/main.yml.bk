---
# tasks file for Project
- name: Create namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        labels:
          app.kubernetes.io/managed-by: "mysql-operator"
  loop: "{{ environments }}"

- name: Create PersistentVolume
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: "pv-{{ ansible_operator_meta.name }}-{{ item.name }}"
        namespace: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        labels:
          app.kubernetes.io/managed-by: "mysql-operator"
      spec:
        capacity:
          storage: "{{ properties.Storage_size }}"
        accessModes:
          - ReadWriteOnce
        persistentVolumeReclaimPolicy: Retain
        storageClassName: standard
        hostPath:
          path: "/data/{{ ansible_operator_meta.name }}-{{ item.name }}"
      loop: "{{ environments }}"

- name: Create PersistentVolumeClaim
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "pvc-{{ ansible_operator_meta.name }}-{{ item.name }}"
        namespace: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        labels:
          app.kubernetes.io/managed-by: "mysql-operator"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ properties.Storage_size }}"
  loop: "{{ environments }}"


- name: Create a resource quota
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ResourceQuota
      metadata:
        namespace: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        name: resource-quota
        labels:
          app.kubernetes.io/managed-by: "project-operator"
      spec:
        hard:
          limits.cpu: "{{ item.resource.limits.cpu }}"
          limits.memory: "{{ item.resource.limits.memory }}"
          requests.cpu: "{{ item.resource.request.cpu }}"
          requests.memory: "{{ item.resource.request.memory }}"
  loop: "{{ environments }}"

- name: Create ServiceAccount
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: "{{ item[1] }}"
        namespace: "{{ ansible_operator_meta.name }}-{{ item[0].name }}"
  with_nested:
    - "{{ environments }}"
    - "{{ members }}"

- name: Create a member role building
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: "{{ item[1] }}"
        namespace: "{{ ansible_operator_meta.name }}-{{ item[0].name }}"
        labels:
          app.kubernetes.io/managed-by: "project-operator"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: edit
      subjects:
        - kind: ServiceAccount
          name: "{{ item[1] }}"
  with_nested:
    - "{{ environments }}"
    - "{{ members }}"

- name: Deploy Mysql
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: mysql-deployment
        namespace: "{{ ansible_operator_meta.name }}-{{ item[0].name }}"
        labels:
          app.kubernetes.io/managed-by: "mysql-operator"
      spec:
        replicas: 1
        selector:
        template:
          metadata:
          spec:
            volumes:
              - name: "mysql-{{ ansible_operator_meta.name }}-{{ item[0].name }}"
                persistentVolumeClaim:
                  claimName: "pvc-{{ ansible_operator_meta.name }}-{{ item[0].name }}"
            containers:
              - name: "mysql-db-{{ ansible_operator_meta.name }}-{{ item[0].name }}"
                image: "{{ properties.Image }}"
                env:
                  - name: MYSQL_DATABASE
                    value: "{{ properties.Database }}"
                  - name: MYSQL_PASSWORD
                    value: "{{ properties.Password }}"
                  - name: MYSQL_USER
                    value: "{{ properties.Database }}"
                volumeMounts:
                  - mountPath: /var/lib/mysql
                     name: "mysql-{{ ansible_operator_meta.name }}-{{ item[0].name }}"
            serviceAccountName: "{{ item[1] }}"
  with_nested:
    - "{{ environments }}"
    - "{{ members }}"
